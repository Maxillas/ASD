import unittest

from NativeCache import NativeCache


class TestOrderedList(unittest.TestCase):

    def test_min(self):
        cache = NativeCache(5)

        cache.hits[0] = 6
        cache.hits[1] = 2
        cache.hits[2] = 1
        cache.hits[3] = 8
        cache.hits[4] = 0

        self.assertEqual(cache.min_in_hits(), 4)

    def test_hash_fun(self):
        cache = NativeCache(17)

        self.assertEqual(cache.hash_fun("a"), 12)
        self.assertEqual(cache.hash_fun("b"), 13)
        self.assertEqual(cache.hash_fun("c"), 14)
        self.assertEqual(cache.hash_fun("d"), 15)
        self.assertEqual(cache.hash_fun("e"), 16)
        self.assertEqual(cache.hash_fun("f"), 0)
        self.assertEqual(cache.hash_fun("g"), 1)
        self.assertEqual(cache.hash_fun("h"), 2)
        self.assertEqual(cache.hash_fun("i"), 3)
        self.assertEqual(cache.hash_fun("j"), 4)
        self.assertEqual(cache.hash_fun("k"), 5)
        self.assertEqual(cache.hash_fun("l"), 6)
        self.assertEqual(cache.hash_fun("m"), 7)
        self.assertEqual(cache.hash_fun("n"), 8)
        self.assertEqual(cache.hash_fun("o"), 9)
        self.assertEqual(cache.hash_fun("p"), 10)
        self.assertEqual(cache.hash_fun("q"), 11)
        self.assertEqual(cache.hash_fun("aa"), 7)
        self.assertEqual(cache.hash_fun("aaa"), 2)
        self.assertEqual(cache.hash_fun("w"), 0)
        self.assertEqual(cache.hash_fun("wf"), 0)
        self.assertEqual(cache.hash_fun("string"), 0)
    #
    def test_all(self):
        cache = NativeCache(17)
        cache.put("f", "str1")
        self.assertEqual(cache.slots[0], "str1")
        cache.put("a", "str2")
        self.assertEqual(cache.slots[12], "str2")
        cache.put("b", "str3")
        self.assertEqual(cache.slots[13], "str3")
        cache.put("c", "str4")
        self.assertEqual(cache.slots[14], "str4")
        cache.put("d", "str5")
        self.assertEqual(cache.slots[15], "str5")
        cache.put("e", "str6")
        self.assertEqual(cache.slots[16], "str6")
        cache.put("p", "str7")
        self.assertEqual(cache.slots[10], "str7")
        cache.put("q", "str8")
        self.assertEqual(cache.slots[11], "str8")
        cache.put("aa", "str9")
        self.assertEqual(cache.slots[7], "str9")
        cache.put("aaa", "str10")
        self.assertEqual(cache.slots[2], "str10")
        cache.put("string", "str11")
        self.assertEqual(cache.slots[1], "str11")
        cache.put("m", "str12")
        self.assertEqual(cache.slots[8], "str12")
        cache.put("n", "str13")
        self.assertEqual(cache.slots[9], "str13")
        cache.put("o", "str14")
        self.assertEqual(cache.slots[3], "str14")
        cache.put("l", "str15")
        self.assertEqual(cache.slots[6], "str15")
        cache.put("g", "str16")
        self.assertEqual(cache.slots[4], "str16")
        cache.put("h", "str17")
        self.assertEqual(cache.slots[5], "str17")
        cache.put("f", "str_NEW")
        self.assertEqual(cache.slots[0], "str_NEW")
        cache.put("i", "str_R")
        self.assertEqual(cache.slots[0], "str_R")

        cache.get("a")
        self.assertEqual(cache.hits[12], 1)
        cache.get("a")
        cache.get("a")
        cache.get("a")
        cache.get("a")
        self.assertEqual(cache.hits[12], 5)
        cache.get("b")
        cache.get("b")
        cache.get("b")
        self.assertEqual(cache.hits[13], 3)
        cache.get("c")
        cache.get("c")
        self.assertEqual(cache.hits[14], 2)
        cache.get("d")
        cache.get("d")
        cache.get("d")
        cache.get("e")
        cache.get("e")
        cache.get("p")
        cache.get("p")
        cache.get("q")
        cache.get("q")
        cache.get("q")
        cache.get("aa")
        cache.get("aa")
        cache.get("aaa")
        cache.get("aaa")
        cache.get("m")
        cache.get("m")
        cache.get("n")
        cache.get("n")
        cache.get("o")
        cache.get("o")
        cache.get("l")
        cache.get("l")
        cache.get("g")
        cache.get("g")
        cache.get("h")
        cache.get("h")
        cache.get("i")
        cache.get("i")
        self.assertEqual(cache.hits[1], 0)
        cache.put("f", "str_NEW")
        self.assertEqual(cache.slots[1], "str_NEW")
